@model APIRestPayment.Models.WebPageModels.SalesPageModel

@using System.Threading
@{
    ViewBag.Title = "SalesLaunch";
    CASPaymentDAO.DataHandler.AccountDataHandler accountHandler = (CASPaymentDAO.DataHandler.AccountDataHandler)ViewData["accountHandler"];
    APIRestPayment.Models.POSTModels.PaymentPOSTModel paymodel = ViewBag.PaymentPOSTModel;
    //APIRestPayment.Models.POSTModels.PaymentPOSTModel paymodel = (APIRestPayment.Models.POSTModels.PaymentPOSTModel)ViewData["PaymentPOSTModel"];
    CASPaymentDTO.Domain.Users payeeUserItem = accountHandler.Search(new CASPaymentDTO.Domain.Account { Accountnumber = paymodel.PayeeAccountNumber }).Cast<CASPaymentDTO.Domain.Account>().FirstOrDefault().UsersItem;
    string payeeName = (payeeUserItem.UserType == "RP") ? payeeUserItem.RealPersonItem.Firstname + " " + payeeUserItem.RealPersonItem.Lastname : payeeUserItem.LegalPersonItem.Companyname;

}
<!DOCTYPE html>
<h2>SalesLaunch</h2>

<html lang="en">
<head>
    <title></title>
    <script src="~/jquery-2.1.1.js"></script>
    <script src="~/jquery-ui.min-1.11.1.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            var _strName = "amir";
            $("#Button1").click(function () {
                var b = "a";
                $.ajax({
                    type: "POST",
                    url: "WebServiceAjax.asmx/Checked",
                    // The key needs to match your method's input parameter (case-sensitive).
                    data: JSON.stringify({ Name: _strName }),
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (data) { alert(data.d); },
                });
            });
        });
    </script>
</head>
<body>
    <section id="PurchaseForm">
        @using (Html.BeginForm("SalesLaunch", "Sales", new { returnUrl = ViewBag.ReturnUrl , PaymentPOSTModelJSON = Newtonsoft.Json.JsonConvert.SerializeObject( ViewBag.PaymentPOSTModel , new Newtonsoft.Json.JsonSerializerSettings{NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore} )}, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
        {
            @Html.AntiForgeryToken()
            <div class="form-group">
                Payee Name :
                @payeeName
            </div>
            <div class="form-group">
                Payee Account Number:
                <div class="col-md-10">
                    @paymodel.PayeeAccountNumber
                </div>
            </div>
            <div class="form-group">
                Amount:
                @paymodel.Amount
                <div class="col-md-10">
                    @paymodel.Currency
                </div>
            </div>


            <div class="form-group">
                Payer Account Number:
                <div class="col-md-10">
                    @Html.DropDownListFor(m => m.SelectedUserAccountId, Model.UserAccount, "--- Select Account ---")
                </div>
            </div>
            <div class="form-group">
                @Html.LabelFor(m => m.PINCode, new { @class = "col-md-2 control-label" })
                <div class="col-md-10">
                    @Html.PasswordFor(m => m.PINCode, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.PINCode)
                </div>
            </div>
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Purchase" class="btn btn-default" />
                </div>
            </div>
        }
    </section>

    @*<input id="Button1" type="button" value="button" />*@
    @*<div class="form-group">
        @Html.LabelFor(m => m.Password, new { @class = "col-md-2 control-label" })
        <div class="col-md-10">
            @Html.PasswordFor(m => m.Password, new { @class = "form-control" })
            @Html.ValidationMessageFor(m => m.Password)
        </div>
    </div>*@
</body>
</html>
